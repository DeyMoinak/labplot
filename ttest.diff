diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 1c39d438f..9eea05497 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -236,6 +236,7 @@ set(BACKEND_SOURCES
 	${BACKEND_DIR}/matrix/matrixcommands.cpp
 	${BACKEND_DIR}/matrix/MatrixModel.cpp
 	${BACKEND_DIR}/pivot/PivotTable.cpp
+        ${BACKEND_DIR}/t_test/ttest.cpp
 	${BACKEND_DIR}/spreadsheet/Spreadsheet.cpp
 	${BACKEND_DIR}/spreadsheet/SpreadsheetModel.cpp
 	${BACKEND_DIR}/lib/XmlStreamReader.cpp
diff --git a/src/backend/t_test/ttest.cpp b/src/backend/t_test/ttest.cpp
new file mode 100644
index 000000000..b0365b042
--- /dev/null
+++ b/src/backend/t_test/ttest.cpp
@@ -0,0 +1,134 @@
+#include "ttest.h"
+#include "backend/spreadsheet/Spreadsheet.h"
+#include "backend/core/column/Column.h"
+//#include "commonfrontend/spreadsheet/SpreadsheetView.h"
+
+#include <QDebug>
+#include <QVector>
+#include <QMessageBox>
+#include <QTranslator>
+#include <QtMath>
+
+
+TTest::TTest(const QString &name)
+{
+    Q_UNUSED(name);
+}
+
+void TTest::setDataSourceSpreadsheet(Spreadsheet *spreadsheet)
+{
+    dataSourceSpreadsheet = spreadsheet;
+
+    m_rows = dataSourceSpreadsheet->rowCount();
+    m_columns = dataSourceSpreadsheet->columnCount();
+    qDebug() << "in ttest::setDataSourceSpreadsheet";
+
+    // now finding the number of columns and rows;
+    qDebug() << "row count is " << m_rows;
+    qDebug() << "row count is " << m_columns;
+    qDebug() << "exiting ttest::setDataSourceSpreadsheet";
+}
+
+void TTest::setColumns(QVector<Column*> cols)
+{
+    columns = cols;
+    return;
+}
+
+void TTest::performTwoSampleTest()
+{
+    QMessageBox* msg_box = new QMessageBox();
+    // checking for cols;
+    if(columns.size() != 2)
+    {
+        msg_box->setText(QLatin1String("Inappropriate number of columns selected"));
+        msg_box->exec();
+        return;
+    }
+
+    bool modeOk = true;
+    for(int i=0; i<2; i++)
+    {
+        if(columns[0]->columnMode() == AbstractColumn::Numeric || columns[i]->columnMode() == AbstractColumn::Integer)
+            continue;
+        modeOk = false;
+    }
+
+    if(!modeOk)
+    {
+        msg_box->setText("select only columns with numbers");
+        msg_box->exec();
+        return;
+    }
+
+    // use of three than two for human readiblity of code;
+    int n[3];
+    double sum[3], mean[3], std[3];
+
+    for(int i=1; i<=2; i++)
+    {
+        findStats(columns[i-1], n[i], sum[i], mean[i], std[i]);
+        qDebug() << "for " << i;
+        qDebug() << "n is "<<n[i];
+        qDebug() << "mean is " << mean[i];
+        qDebug() << "std is " << std[i];
+
+        if(n[i] < 1)
+        {
+            msg_box->setText("atleast one of selected column empty");
+            msg_box->exec();
+            return;
+        }
+    }
+    int df = n[1] + n[2] - 2;
+
+    //Assuming equal variance
+    double sp = qSqrt( ((n[1]-1)*qPow(std[1],2) + (n[2]-1)*qPow(std[2],2))/df);
+
+    qDebug() << "sp is " << sp;
+
+    double t = (mean[1] - mean[2])/(sp*qSqrt(1.0/n[1] + 1.0/n[2]));
+    QString text = QString("T value for test is %1").arg(t);
+    msg_box->setText(text);
+    msg_box->exec();
+    return;
+
+//    double t_value =
+
+}
+
+void TTest::findStats(Column* column, int &count, double &sum, double &mean, double &std)
+{
+    sum = 0;
+    mean = 0;
+    std = 0;
+
+    count = column->rowCount();
+    for(int i=0; i<count; i++)
+    {
+        double row = column->valueAt(i);
+        if(std::isnan(row))
+        {
+            count = i;
+            break;
+        }
+        sum += row;
+    }
+
+    if(count < 1) return;
+    mean = sum/count;
+
+    for(int i=0; i<count; i++)
+    {
+        double row = column->valueAt(i);
+        std += qPow((row - mean),2);
+    }
+
+    if(count > 1)
+        std = std/(count-1);
+    std = qSqrt(std);
+    return;
+}
+
+
+
diff --git a/src/backend/t_test/ttest.h b/src/backend/t_test/ttest.h
new file mode 100644
index 000000000..042332806
--- /dev/null
+++ b/src/backend/t_test/ttest.h
@@ -0,0 +1,28 @@
+#ifndef TTEST_H
+#define TTEST_H
+#include <QVector>
+
+
+class Spreadsheet;
+class QString;
+class Column;
+
+class TTest
+{
+public:
+    explicit TTest(const QString& name);
+    void setDataSourceSpreadsheet(Spreadsheet* spreadsheet);
+    void setColumns(QVector<Column*> cols);
+    void performTwoSampleTest();
+private:
+//    double findMean(Column* col);
+//    double findStandardDeviation(Column* col, double mean);
+    void findStats(Column* column, int &count, double &sum, double &mean, double &std);
+
+    Spreadsheet* dataSourceSpreadsheet{nullptr};
+    int m_rows{0};
+    int m_columns{0};
+    QVector<Column*> columns;
+};
+
+#endif // TTEST_H
diff --git a/src/commonfrontend/spreadsheet/SpreadsheetView.cpp b/src/commonfrontend/spreadsheet/SpreadsheetView.cpp
index ef0717c15..bfb09046f 100644
--- a/src/commonfrontend/spreadsheet/SpreadsheetView.cpp
+++ b/src/commonfrontend/spreadsheet/SpreadsheetView.cpp
@@ -43,6 +43,8 @@
 #include "backend/core/datatypes/DateTime2StringFilter.h"
 #include "backend/core/datatypes/String2DateTimeFilter.h"
 #include "backend/pivot/PivotTable.h"
+#include "backend/t_test/ttest.h"
+
 
 #include <QKeyEvent>
 #include <QClipboard>
@@ -220,6 +222,7 @@ void SpreadsheetView::initActions() {
 	action_go_to_cell = new QAction(QIcon::fromTheme("go-jump"), i18n("&Go to Cell"), this);
 	action_statistics_all_columns = new QAction(QIcon::fromTheme("view-statistics"), i18n("Statisti&cs"), this );
 	action_pivot_table = new QAction(QIcon::fromTheme("table"), i18n("Pivot Table"), this);
+    action_do_ttest = new QAction(i18n("T Test"),this);
 
 	// column related actions
 	action_insert_column_left = new QAction(QIcon::fromTheme("edit-table-insert-column-left"), i18n("Insert Column Left"), this);
@@ -471,6 +474,12 @@ void SpreadsheetView::initMenus() {
 		m_columnMenu->addMenu(m_columnManipulateDataMenu);
 		m_columnMenu->addSeparator();
 
+        //for ttest statistics;
+        m_columnHypotheisTestingMenu = new QMenu("Hypothesis Testing",this);
+        m_columnHypotheisTestingMenu->addAction(action_do_ttest);
+        m_columnMenu->addMenu(m_columnHypotheisTestingMenu);
+        m_columnMenu->addSeparator();
+
 		m_columnSortMenu = new QMenu(i18n("Sort"), this);
 		m_columnSortMenu->setIcon(QIcon::fromTheme("view-sort-ascending"));
 		m_columnSortMenu->addAction(action_sort_asc_column);
@@ -558,6 +567,7 @@ void SpreadsheetView::connectActions() {
 	connect(action_go_to_cell, &QAction::triggered, this,
 			static_cast<void (SpreadsheetView::*)()>(&SpreadsheetView::goToCell));
 	connect(action_pivot_table, &QAction::triggered, this, &SpreadsheetView::createPivotTable);
+    connect(action_do_ttest, &QAction::triggered, this, &SpreadsheetView::doTTest);
 
 	connect(action_insert_column_left, &QAction::triggered, this, &SpreadsheetView::insertColumnLeft);
 	connect(action_insert_column_right, &QAction::triggered, this, &SpreadsheetView::insertColumnRight);
@@ -764,9 +774,17 @@ void SpreadsheetView::createPivotTable() {
 	PivotTable* pivot = new PivotTable(i18n("Pivot Table for %1", m_spreadsheet->name()));
 	pivot->setDataSourceType(PivotTable::DataSourceSpreadsheet);
 	pivot->setDataSourceSpreadsheet(m_spreadsheet);
-	m_spreadsheet->parentAspect()->addChild(pivot);
+    m_spreadsheet->parentAspect()->addChild(pivot);
 }
 
+void SpreadsheetView::doTTest()
+{
+    TTest* ttest = new TTest(i18n("doing T Test for %1", m_spreadsheet->name()));
+    ttest->setColumns(this->selectedColumns());
+    ttest->performTwoSampleTest();
+}
+
+
 void SpreadsheetView::handleHorizontalSectionMoved(int index, int from, int to) {
 	Q_UNUSED(index);
 
diff --git a/src/commonfrontend/spreadsheet/SpreadsheetView.h b/src/commonfrontend/spreadsheet/SpreadsheetView.h
index b67df1252..4023a9bb6 100644
--- a/src/commonfrontend/spreadsheet/SpreadsheetView.h
+++ b/src/commonfrontend/spreadsheet/SpreadsheetView.h
@@ -130,6 +130,7 @@ private:
 	QAction* action_go_to_cell;
 	QAction* action_statistics_all_columns;
 	QAction* action_pivot_table;
+    QAction* action_do_ttest;
 
 	//column related actions
 	QAction* action_insert_column_left;
@@ -192,6 +193,7 @@ private:
 	QMenu* m_spreadsheetMenu;
 	QMenu* m_plotDataMenu;
 	QMenu* m_analyzePlotMenu;
+    QMenu* m_columnHypotheisTestingMenu{nullptr};
 
 public slots:
 	void createContextMenu(QMenu*);
@@ -206,6 +208,7 @@ private slots:
 	void goToPreviousColumn();
 	void goToCell();
 	void createPivotTable();
+    void doTTest();
 	void sortSpreadsheet();
 	void sortDialog(QVector<Column*>);
 
