/* LabPlot : parser.y	*/

%{
#include <locale.h>
#include "parser.h"
%}

%union {
double dval;  /* For returning numbers.                   */
symrec *tptr;   /* For returning symbol-table pointers      */
}

%token <dval>  NUM 	/* Simple double precision number   */
%token <tptr> VAR FNCT	/* Variable and Function            */
%type  <dval>  expr

%right '='
%left '-' '+'
%left '*' '/'
%left NEG     /* Negation--unary minus */
%right '^'    /* Exponential        */

%%
input:   /* empty */
	| input line
;

line:	'\n'
	| expr '\n'   { res=$1; }
	| error '\n' { yyerrok; }
;

expr:      NUM       { $$ = $1;                         }
| VAR                { $$ = $1->value.var;              }
| VAR '=' expr       { $$ = $3; $1->value.var = $3;     }
| FNCT '(' ')'       { $$ = (*($1->value.fnctptr))();   }
| FNCT '(' expr ')'  { $$ = (*($1->value.fnctptr))($3); }
| FNCT '(' expr ',' expr ')'  { $$ = (*($1->value.fnctptr))($3,$5); }
| FNCT '(' expr ',' expr ','expr ')'  { $$ = (*($1->value.fnctptr))($3,$5,$7); }
| FNCT '(' expr ',' expr ',' expr ','expr ')'  { $$ = (*($1->value.fnctptr))($3,$5,$7,$9); }
| expr '+' expr      { $$ = $1 + $3;                    }
| expr '-' expr      { $$ = $1 - $3;                    }
| expr '*' expr      { $$ = $1 * $3;                    }
| expr '/' expr      { $$ = $1 / $3;                    }
| '-' expr  %prec NEG{ $$ = -$2;                        }
| expr '^' expr      { $$ = pow ($1, $3);               }
| expr '*' '*' expr  { $$ = pow ($1, $4);               }
| '(' expr ')'       { $$ = $2;                         }
;

%%

/* Enable DEBUGGING */
/*
#define LDEBUG
*/

/* The symbol table: a chain of `struct symrec'.  */
symrec *sym_table = (symrec *) 0;

double parse(const char *str) {
#ifdef LDEBUG
	printf("\nparse(\"%s\")\n",str);
#endif
	pos=0;

	/* reset string, because it's global !	*/
	bzero(string, PARSE_STRING_SIZE);

	/* leave space to terminate string by "\n\0" */
	strncpy(string, str, PARSE_STRING_SIZE - 2);
	string[strlen(string)] = '\n';

	/* be sure that the symbol table has been initialized */
	if (!sym_table)
	   init_table();

	yyparse();

#ifdef LDEBUG
	printf("parse() DONE\n");
#endif
	return res;
}

int parse_errors() {
	return yynerrs;
}

int yyerror (const char *s){
	printf ("parse ERROR: %s\n", s);
	return 0;
}

/* put arithmetic functions in table. */
void init_table (void) {
#ifdef LDEBUG
	printf("init_table()\n");
#endif
	symrec *ptr;
	int i;
	/* add functions */
	for (i = 0; _functions[i].name != 0; i++) {
		ptr = putsym (_functions[i].name, FNCT);
		ptr->value.fnctptr = _functions[i].fnct;
	}
	/* add constants */
	for (i = 0; _constants[i].name != 0; i++) {
		ptr = putsym (_constants[i].name, VAR);
		ptr->value.var = _constants[i].value;
	}
#ifdef LDEBUG
	printf("init_table() DONE\n");
#endif
}

void delete_table(void) {
	while(sym_table) {
		symrec *tmp = sym_table;
		sym_table = sym_table->next;
		free(tmp->name);
		free(tmp);
	}
}

symrec* putsym (const char *sym_name, int sym_type) {
#ifdef LDEBUG
	printf("	putsym(): sym_name = %s\n",sym_name);
#endif
	symrec *ptr;
	ptr = (symrec *) malloc (sizeof (symrec));
	ptr->name = (char *) malloc (strlen (sym_name) + 1);
	strcpy (ptr->name,sym_name);
	ptr->type = sym_type;
	ptr->value.var = 0; /* set value to 0 even if fctn.  */
	ptr->next = (struct symrec *)sym_table;
	sym_table = ptr;
#ifdef LDEBUG
	printf("	putsym() DONE\n");
#endif
	return ptr;
}

symrec* getsym (const char *sym_name) {
#ifdef LDEBUG
	printf("	getsym() : sym_name = %s\n",sym_name);
#endif
	symrec *ptr;
	for (ptr = sym_table; ptr != (symrec *) 0; ptr = (symrec *)ptr->next) {
		if (strcmp (ptr->name,sym_name) == 0) {
#ifdef LDEBUG
			printf("		symbol \'%s\' found\n",sym_name);
#endif
			return ptr;
		}
	}

#ifdef LDEBUG
	printf("		symbol \'%s\' not found\n",sym_name);
#endif
	return 0;
}

symrec* assign_variable(const char* symb_name, double value) {
#ifdef LDEBUG
	printf("	assign_variable() : symb_name = %s value=%g\n",symb_name,value);
#endif

	symrec* ptr = getsym(symb_name);
	if (!ptr) {
#ifdef LDEBUG
	printf("		calling putsym() : symb_name = %s\n",symb_name);
#endif

		ptr = putsym(symb_name,VAR);
	}

	ptr->value.var=value;

	return ptr;
};

static int getcharstr(void) {
#ifdef LDEBUG
	printf("		getcharstr()\n");
#endif
	if ('\0' == string[pos])
		return EOF;
	return (int) string[pos++];
}

static void ungetcstr(void) {
    if (pos > 0)
        pos--;
}

int yylex (void) {
#ifdef LDEBUG
	printf("	yylex()\n");
#endif
	int c;

	/* skip white space  */
	while ((c = getcharstr ()) == ' ' || c == '\t' );

	/* finish if reached EOF */
	if (c == EOF) {
#ifdef LDEBUG
		printf("FINISHED\n");
#endif
		return 0;
	}

#ifdef LDEBUG
	printf("	reading character: %c\n",c);
#endif

	/* process numbers */
	if (isdigit (c)) {
#ifdef LDEBUG
		printf("		reading number (starts with digit)\n");
#endif
                ungetcstr();
                char *s = &string[pos];

		/* convert to double */
		char *remain;
#if defined(_WIN32) || defined(__APPLE__)
		double result = strtod(s,&remain);
#else
		/* use same locale for all languages: '.' as decimal point */
		locale_t locale = newlocale (LC_NUMERIC_MASK, "C", NULL);

		double result = strtod_l(s,&remain,locale);
		freelocale(locale);
#endif
#ifdef LDEBUG
		printf("		reading: %s",s);
		printf("		remain = %s",remain);
#endif
		/* check conversion */
		if(strlen(s) == strlen(remain))
			return 0;
#ifdef LDEBUG
		printf("		result = %g\n",result);
#endif
		yylval.dval=result;

                pos += strlen(s)-strlen(remain);

		return NUM;
	}

	if (isalpha (c) || c == '.') {
#ifdef LDEBUG
		printf("		reading identifier (starts with alpha)\n");
#endif
		static char *symbuf = 0;
		static int length = 0;
		int i=0;

		/* Initially make the buffer long enough
		   for a 20-character symbol name.  */
		if (length == 0)
			length = 20, symbuf = (char *)malloc (length + 1);

		do {
			/* If buffer is full, make it bigger.        */
			if (i == length) {
				length *= 2;
				symbuf = (char *)realloc (symbuf, length + 1);
			}
			/* Add this character to the buffer.         */
			symbuf[i++] = c;
			/* Get another character.                    */
			c = getcharstr ();
		}
		while (c != EOF && (isalnum (c) || c == '_' || c == '.'));

		ungetcstr ();
		symbuf[i] = '\0';

		symrec *s = getsym (symbuf);
		if(s == 0) {	/* symbol unknown */
#ifdef LDEBUG
			printf("		ERROR: symbol \"%s\" UNKNOWN\n",symbuf);
#endif
			return 0;
		}
		/* old behavior */
		/* if (s == 0)
			 s = putsym (symbuf, VAR);
		*/
		yylval.tptr = s;
		return s->type;
	}

#ifdef LDEBUG
	printf("	single operator\n");
#endif
	/* else: single operator */
	return c;
}
